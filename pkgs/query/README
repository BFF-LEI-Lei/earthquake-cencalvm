// -*- C++ -*-
//
// ----------------------------------------------------------------------
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// <LicenseText>
//
// ----------------------------------------------------------------------
//

/**
 * @anchor queryREADME
 * @file pkgs/query/README
 * 
 * @brief Interface for querying USGS central CA velocity model.
 *
 * This directory tree contains the routines for querying the USGS
 * central CA velocity model along with some examples.
 *
 * @section dirs Directories
 *
 * @li \b apps Applications for help in querying models.
 * @li \b examples Examples of how to use the query routines.
 * @li \b lib Source code for C++ query routines.
 * @li \b liblang Source code for C and Fortran bindings of C++ query
 * routines.
 * @li \b tests Unit testing routines for C++ query routines.
 *
 * @section Database
 *
 * See cencalvm::storage::PayloadStruct for a list of the data (and the order
 * in which it is returned by default).
 *
 * @subsection Units
 *
 * SI units are used in the database and its interface. See the
 * documentation of the query routines for specific units of arguments
 * to each routine.
 *
 * @section Applications
 *
 * @subsection cencalvminfo
 *
 * This application dumps the metadata and database schema from an
 * etree database to stdout.
 *
 * @section Examples
 *
 * The data directory contains sample input and output for the
 * examples. The output can be compared to that generated on your
 * machine to make sure the example ran properly.
 *
 * The cpp, c, and f77 directories contain the examples of how to
 * query the database from C++, C, and Fortran, respectively.
 *
 * @section Querying routines
 *
 * Documentation for the query routines for each language are
 * contained in the header files. Pay special attention to the default
 * query parameters.
 *
 * @subsection queryTypes Query types
 *
 * The etree database is a fully populated etree, meaning data is
 * stored at the leaves of the tree as well as in the interior. The
 * values at the interior octants at each level are the average values
 * of the values of its children. Because averaging fault block and
 * zone values is not meaningful, those values are set to -999 in the
 * interior octants. Values at the different levels of the etree
 * correspond to material properties at different spatial resolutions,
 * for example the P wave speed on a scale of 25 meters versus the P
 * wave speed on a scale of 400 meters.
 *
 * @note In the database, the value for Vs in water is -999. In order
 * to prevent nonphysical values for solid material near the
 * solid/water interface, all values for water (Vp, Vs, density, etc)
 * are ignored in the averaging. In the cases where all of an interior
 * octant's children are associated with water, the material
 * properties are set to -999.
 *
 * The query routine assigns values from the Etree database for a
 * given location depending on the query type.
 *
 * @note Resolution in the discussion that follows refers to the
 * vertical resolution which is greater than the horizontal
 * resolution.
 *
 * @li When the query type is set to MAXRES, then the query routines will
 * use values at the maximum resolution available.
 *
 * @li When the query type is set to FIXEDRES, values at the requested
 * resolution will be used even if the database contains values at a
 * higher resolution. This prevents aliasing the model for queries at
 * a uniform spatial resolution. The requested resolution is set with
 * cencalvm::query::queryRes() in C++, cencalvm_queryRes() in C, and
 * cencalvm_queryres_f() in Fortran.
 *
 * @li When the query type is set to AVGRES, the requested resolution
 * is the wavelength for shear waves at a given minimum period. The
 * query routine first finds the maximum resolution available and
 * traverses up the tree until the resolution is no greater than the
 * requested resolution. This prevents aliasing the model for queries
 * at variable spatial resolution but uniform resolution with respect
 * to the wavelength of shear waves at a given period. The requested
 * resolution is set by passing the minimum period as an argument to
 * cencalvm::query::queryRes() in C++, cencalvm_queryRes() in C, and
 * cencalvm_queryres_f() in Fortran.
 *
 * @subsection f77notes Fortran 77 notes
 *
 * @li \b cencalvm_createquery_f()
 *
 * The argument to cencalvm_createquery_f() is used to store the
 * address of the handle to the underlying C++ object. It is
 * ABSOLUTELY CRITICAL that the number of bytes associated with this
 * variable match the size of a C/C++ pointer on the system where the
 * routines are compiled. On 32-bit and 64-bit systems, the variables
 * will generally be a 4 byte integer (integer*4) and an 8 byte
 * integer (integer*8), respectively.
 *
 * @li No Fortran 77 binding for cencalvm_queryVals()
 *
 * Because arrays of strings cannot be passed from Fortran to C++ in a
 * standard manner, there is no Fortran 77 binding for
 * cencalvm_queryVals(). Instead, you must accept the default behavior
 * in which all values are returned.
 */

// version
// $Id$

// End of file 
